/*Baher, Islam, Omar, Ebram and Mariam have watched "The maze runner" movie.

The film inspired them to solve simple 2D mazes.

Given a square maze (of size n*n) consisting of . (free cells) and # (blocks), They want to write a program that can find the length of the shortest path between a starting and a goal cell.

The maze runner can't step on a # block.

Additionally, the runner can only move horizontally or vertically (diagonal movements aren't allowed).

Input
A single integer n (3<=n<=100) determining the size of the grid.

Then n lines describing the square grid will be entered. Each line will be of length n and consist only of dots and hashes.

The last line will contain 4 integers (startR, startC, destinationR, destinationC). All the integers are in range [0, n[ (Zero-indexed grid).

Output
A single integer min_dis which indicates the number of steps required to move from the starting cell to the destination one.

Note: It is guaranteed that there exists a path between the starting and destination cells.*/

#include <iostream>
#include <queue>
#include <climits>
#include <cstring>
#include <vector>
#include <string>
using namespace std;


struct myNode
{
    int x, y, dist;
};

int row[] = {-1, 0, 0, 1};
int col[] = {0, -1, 1, 0};

bool is_valid(vector<vector<int>> &matrix, vector<vector<bool>> &visited, int r, int c, int v)
{
    return (r >= 0) && (r < v) && (c >= 0) && (c < v) && matrix[r][c] && !visited[r][c];
}

// Find Shortest Possible Route in a matrix mat from source
// cell (i, j) to destination cell (x, y)
void BF(vector<vector<int>> &matr, int i, int j, int x, int y, int n)
{
    vector<vector<bool>> visited(n, vector<bool>(n, false));

    queue<myNode> q;

    visited[i][j] = true;
    q.push({i, j, 0});

  
    int min_dist = 100000;

    while (!q.empty())
    {
       
        myNode my_node = q.front();
        q.pop();

        int i = my_node.x, j = my_node.y, dist = my_node.dist;

        
        if (i == x && j == y)
        {
            min_dist = dist;
            break;
        }

        for (int k = 0; k < 4; k++)
        {
            
            if (is_valid(matr, visited, i + row[k], j + col[k], n))
            {
                visited[i + row[k]][j + col[k]] = true;
                q.push({i + row[k], j + col[k], dist + 1});
            }
        }
    }

    if (min_dist != 100000)
        cout << min_dist << endl;
    else
        cout << "Destination can't be reached!";
}


int main()
{
    int n, sR, sC, dR, dC;
    string input;
    cin >> n;
    vector<vector<int>> maze(n, vector<int>(n));
   
    for (int i = 0; i < n; i++)
    {
        cin >> input;
        for (int j = 0; j < n; j++)
        {

            if (input[j] == '.')
                maze[i][j] = 1;
            else if (input[j] == 'X')
                maze[i][j] = 0;
        }
    }
    cin >> sR >> sC >> dR >> dC;
    
    BF(maze, sR, sC, dR, dC, n);

    return 0;
}
