#include <iostream>
using namespace std;

void merge(long long arr[], int l, int m, int r) 
{ 
    int i, j, k; 
    int n1 = m - l + 1; 
    int n2 =  r - m; 
  
    /* create temp arrays */
    long long L[n1], R[n2]; 
  
    /* Copy data to temp arrays L[] and R[] */
    for (i = 0; i < n1; i++) 
        L[i] = arr[l + i]; 
    for (j = 0; j < n2; j++) 
        R[j] = arr[m + 1+ j]; 
    /* Merge the temp arrays back into arr[l..r]*/
    i = 0; // Initial index of first subarray 
    j = 0; // Initial index of second subarray 
    k = l; // Initial index of merged subarray 
    while (i < n1 && j < n2) 
    { 
        if (L[i] <= R[j]) 
        { 
            arr[k] = L[i]; 
            i++; 
        } 
        else
        { 
            arr[k] = R[j]; 
            j++; 
        } 
        k++; 
    } 
    while (i < n1) 
    { 
        arr[k] = L[i]; 
        i++; 
        k++; 
    } 
    while (j < n2) 
    { 
        arr[k] = R[j]; 
        j++; 
        k++; 
    } 
} 

void mergeSort(long long arr[], int l, int r) 
{ 
    if (l < r) 
    { 
        // Same as (l+r)/2, but avoids overflow for 
        // large l and h 
        int m = l+(r-l)/2; 
  
        // Sort first and second halves 
        mergeSort(arr, l, m); 
        mergeSort(arr, m+1, r); 
  
        merge(arr, l, m, r); 
    } 
} 
bool hasArrayTwoPairs(long long A[], long long arr_size, 
                                         long sum) 
{ 
    int l, r; 
    /* Sort the elements */
    mergeSort(A, 0,arr_size-1); 
    l = 0; 
    r = arr_size - 1;  
    while (l < r) 
    { 
        if(A[l] + A[r] == sum) 
            return 1;  
        else if(A[l] + A[r] < sum) 
            l++; 
        else // A[i] + A[j] > sum 
            r--; 
    }  
    return 0; 
} 
int main() {
	long long s,n;
	cin>>s>>n;
	long long *arr=new long long [s];
	for(int i=0;i<s;i++){
		cin>>arr[i];
	}
	if(hasArrayTwoPairs(arr,s,n)){
	cout<<"YES";
	}
	else{
	cout<<"NO";
	}
	return 0;
}
